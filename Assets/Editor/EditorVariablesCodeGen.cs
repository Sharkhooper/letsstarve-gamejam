using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
#if UNITY_EDITOR
using UnityEditor;

#endif

/// <summary>
/// Adds a Menu item "Tools/Utils/GameTags and Layers to Code" to generate class files for untiy layers and tags
/// </summary>
public static class EditorVariablesCodeGen {
	private static SerializedProperty cachedTags;
	private static SerializedProperty cachedLayers;
	private static readonly Stopwatch Sw = new Stopwatch();

	[InitializeOnLoadMethod]
	private static void Initialize() {
		Sw.Start();
		EditorApplication.update += Generate;
	}

	private static void Generate() {
		if (EditorApplication.isPlaying) return;

		if (Sw.ElapsedMilliseconds > 2000) {
			// once every two seconds
			GenerateCodeFiles();
			Sw.Reset();
			Sw.Start();
		}
	}

	[MenuItem("Tools/Utils/GameTags and Layers to Code")]
	private static void GenerateCodeFiles() {
		SerializedObject tagManager = new SerializedObject(AssetDatabase.LoadAllAssetsAtPath("ProjectSettings/TagManager.asset")[0]);
		const string WRITE_PATH = "Assets/Scripts/Utilities/GameLayer.cs";
		const string CLASS_TEMPLATE = "public static class {CLASS_NAME} { \n\n{CLASS_BODY} }\n";
		const string VARIABLE_TEMPLATE = "    public const {TYPE} {NAME} = {VALUE};\n";

		string[] buildinTags = {"Untagged", "Respawn", "Finish", "EditorOnly", "MainCamera", "Player", "GameController"};

		SerializedProperty tags = tagManager.FindProperty("tags");
		SerializedProperty layers = tagManager.FindProperty("layers");

		if (tags == cachedTags && layers == cachedLayers) return;
		cachedTags = tags;
		cachedLayers = layers;

		string outputFile = "/* THIS FILE IS AUTOMATICALLY GENERATED! */\n// ReSharper disable All\n";

		string _out = "";
		HashSet<string> tagnames = new HashSet<string>();
		foreach (string buildinTag in buildinTags) {
			string tagname = ValidString(buildinTag, tagnames);
			tagnames.Add(tagname);

			_out += VARIABLE_TEMPLATE.Replace("{TYPE}", "string").Replace("{NAME}", tagname).Replace("{VALUE}", '"' + buildinTag + '"');
		}

		for (int i = 0; i < tags.arraySize; ++i) {
			SerializedProperty c = tags.GetArrayElementAtIndex(i);

			string tagname = ValidString(c.stringValue, tagnames);
			if (string.IsNullOrEmpty(tagname)) continue;

			tagnames.Add(tagname);

			_out += VARIABLE_TEMPLATE.Replace("{TYPE}", "string").Replace("{NAME}", tagname).Replace("{VALUE}", '"' + c.stringValue + '"');
		}

		outputFile += CLASS_TEMPLATE.Replace("{CLASS_NAME}", "GameTag").Replace("{CLASS_BODY}", _out);
		outputFile += "\n";

		_out = "";
		HashSet<string> layernames = new HashSet<string>();
		for (int i = 0; i < layers.arraySize; ++i) {
			SerializedProperty c = layers.GetArrayElementAtIndex(i);
			if (string.IsNullOrEmpty(c.stringValue)) continue;

			string layername = ValidString(c.stringValue, layernames);
			layernames.Add(layername);

			_out += VARIABLE_TEMPLATE.Replace("{TYPE}", "int").Replace("{NAME}", layername).Replace("{VALUE}", i + "");
			_out += VARIABLE_TEMPLATE.Replace("{TYPE}", "int").Replace("{NAME}", layername + "Mask").Replace("{VALUE}", "1 << " + i);
		}

		outputFile += CLASS_TEMPLATE.Replace("{CLASS_NAME}", "GameLayer").Replace("{CLASS_BODY}", _out);

		MonoScript asset = AssetDatabase.LoadAssetAtPath<MonoScript>(WRITE_PATH);
		if (asset != null && asset.text == outputFile) return;

		File.WriteAllText(WRITE_PATH, outputFile);
		AssetDatabase.ImportAsset(WRITE_PATH);
		AssetDatabase.Refresh();
	}

	private static string ValidString(string s, HashSet<string> invalidNames) {
		string m = s.Replace(" ", "").Replace('"', '_').Replace('\'', '_');
		if (invalidNames.Contains(m)) m = s.Replace(" ", "_");

		while (invalidNames.Contains(m)) {
			m = m.Replace("_", "__");
		}

		return m;
	}
}
